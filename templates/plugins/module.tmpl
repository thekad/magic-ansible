{{ template "python_file_header" . }}
from __future__ import absolute_import, division, print_function

__metaclass__ = type

################################################################################
# Documentation
################################################################################

ANSIBLE_METADATA = {
    "metadata_version": "1.1",
    "status": ["preview"],
    "supported_by": "community",
}

DOCUMENTATION = r"""
---
{{ $.Documentation.ToString }}"""

EXAMPLES = r"""
{{ $.Examples.ToString }}"""

RETURN = r"""
{{ $.Returns.ToString }}"""

################################################################################
# Imports
################################################################################

from ansible_collections.google.cloud.plugins.module_utils import gcp_utils as gcp
{{ if $.CustomCode.CustomImport | trimSpace | len | gt 0 -}}
# BEGIN Custom imports
{{ $.CustomCode.CustomImport | trimSpace }}
# END Custom imports
{{- end }}

def self_link(module):
    params = module.params
{{- range $.UrlParamOnlyProperties }}
{{- if strEq .Type "ResourceRef" }}
    params["{{ .Name | underscore -}}"] = gcp.replace_resource_dict(module.params["{{ .Name | underscore -}}"], "{{ .Imports }}")
{{- end }}
{{- end }}

    return "{{ $.BaseUrl }}{{ $.Resource.Mmv1.SelfLinkUri | toPythonTpl }}".format(
        **params
    )


def create_link(module):
    params = module.params
{{- range $.UrlParamOnlyProperties }}
{{- if strEq .Type "ResourceRef" }}
    params["{{ .Name | underscore -}}"] = gcp.replace_resource_dict(module.params["{{ .Name | underscore -}}"], "{{ .Imports }}")
{{- end }}
{{- end }}

    return "{{ $.BaseUrl }}{{ $.Resource.Mmv1.CreateUri | toPythonTpl }}".format(
        **params
    )


def update_link(module):
    params = module.params
{{- range $.UrlParamOnlyProperties }}
{{- if strEq .Type "ResourceRef" }}
    params["{{ .Name | underscore -}}"] = gcp.replace_resource_dict(module.params["{{ .Name | underscore -}}"], "{{ .Imports }}")
{{- end }}
{{- end }}

    return "{{ $.BaseUrl }}{{ $.Resource.Mmv1.UpdateUri | toPythonTpl }}".format(
        **params
    )


def delete_link(module):
    params = module.params
{{- range $.UrlParamOnlyProperties }}
{{- if strEq .Type "ResourceRef" }}
    params["{{ .Name | underscore -}}"] = gcp.replace_resource_dict(module.params["{{ .Name | underscore -}}"], "{{ .Imports }}")
{{- end }}
{{- end }}

    return "{{ $.BaseUrl }}{{ $.Resource.Mmv1.DeleteUri | toPythonTpl }}".format(
        **params
    )


def collection_link(module):
    params = module.params
{{- range $.UrlParamOnlyProperties }}
{{- if strEq .Type "ResourceRef" }}
    params["{{ .Name | underscore -}}"] = gcp.replace_resource_dict(module.params["{{ .Name | underscore -}}"], "{{ .Imports }}")
{{- end }}
{{- end }}

    return "{{ $.BaseUrl }}{{ $.Resource.Mmv1.CollectionUrl | toPythonTpl }}".format(
        **params
    )

{{ range $option := $.AllNestedOptions -}}
class {{ $option.ClassName }}(gcp.Resource):
{{- if $option.InputSuboptions | len | gt 0 }}
    def _request(self):
        return {
    {{- range $suboption := $option.InputSuboptions }}
            "{{ $suboption.Name }}": {{""}}
        {{- if $suboption.IsNestedObject -}}
            {{ $suboption.ClassName }}(self.params.get("{{ $suboption.AnsibleName }}", {})).to_request(),
        {{- else if $suboption.IsNestedList -}}
            [{{ $suboption.ClassName }}(item).to_request() for item in self.params.get("{{ $suboption.AnsibleName }}", [])],
        {{- else -}}
            self.params.get("{{ $suboption.AnsibleName }}"),
        {{- end }}
        {{- end }}
        }
    {{- end }}

{{- if $option.OutputSuboptions | len | gt 0 }}
    def _response(self):
        return {
    {{- range $suboption := $option.OutputSuboptions }}
            "{{ $suboption.Name }}": {{""}}
        {{- if $suboption.IsNestedObject -}}
            {{ $suboption.ClassName }}(self.params.get("{{ $suboption.AnsibleName }}", {})).from_response(),
        {{- else if $suboption.IsNestedList -}}
            [{{ $suboption.ClassName }}(item).from_response() for item in self.params.get("{{ $suboption.AnsibleName }}", [])],
        {{- else -}}
            self.params.get("{{ $suboption.AnsibleName }}"),
        {{- end }}
        {{- end }}
        }
    {{- end }}


{{ end -}}
class {{ $.ModuleClass }}(gcp.Resource):
    def _request(self):
        return {
{{- range $option := $.InputOptions }}
            "{{ $option.Name }}": {{ if $option.IsNestedObject -}}
            {{ $option.ClassName }}(self.params.get("{{ $option.AnsibleName }}", {})).to_request(),
            {{- else if $option.IsList -}}
            [
                {{- if $option.ElementsAre "NestedObject"  -}}
                {{ $option.ClassName }}(self.params.get("{{ $option.AnsibleName }}", {})).to_request(),
                {{- else -}}
                self.params.get("{{ $option.AnsibleName }}"),
                {{- end }}
            ],
            {{- else -}}
            self.params.get("{{ $option.AnsibleName }}"),
            {{- end -}}
{{- end }}
        }

    def _response(self):
        return {
{{- range $option := $.OutputOptions }}
            "{{ $option.Name }}": {{ if $option.IsNestedObject -}}
            {{ $option.ClassName }}(self.params.get("{{ $option.Name }}", {})).from_response(),
            {{- else if $option.IsList -}}
            [
                {{- if $option.ElementsAre "NestedObject"  -}}
                {{ $option.ClassName }}(self.params.get("{{ $option.Name }}", {})).from_response(),
                {{- else -}}
                self.params.get("{{ $option.Name }}"),
                {{- end }}
            ],
            {{- else -}}
            self.params.get("{{ $option.Name }}"),
            {{- end }}
{{- end }}
        }

################################################################################
# Main
################################################################################


def main():
    """Main function"""

    module = gcp.Module(
        {{ $.ArgumentSpec.ToString | indent 8 false }}
    )

    if not module.params["scopes"]:
        module.params["scopes"] = {{ $.Scopes | toJson }}

    state = module.params["state"]

    changed = False

    params = gcp.remove_nones_from_dict(module.params)

    req = {{ $.ModuleClass }}(params, module=module, product="{{ $.ProductName }}", kind="{{ $.Kind }}")

    obj = req.fetch(self_link(module), allow_not_found=True)

    async_op = {{ $.Async.Actions | toJson }}

    if obj is None:
        if state == "present":
            if "create" in async_op:
                obj = req.create_async(create_link(module), async_link_template="{{ $.BaseUrl }}{{ $.Async.Operation.BaseUrl | toPythonTpl }}")
            else:
                obj = resource.create(create_link(module))
            changed = True
        else:
            changed = False
    else:
        pass

    try:
        rsp = {{ $.ModuleClass }}(obj, module=module, product="{{ $.ProductName }}", kind="{{ $.Kind }}")
        obj = rsp.from_response()
    except Exception as e:
        gcp._trace(exc=e)
        module.fail_json(msg=str(e))

    obj.update({"changed": changed})
    module.exit_json(**obj)


if __name__ == "__main__":
    main()
