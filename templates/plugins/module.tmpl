{{ template "python_file_header" . }}
from __future__ import absolute_import, division, print_function

__metaclass__ = type

################################################################################
# Documentation
################################################################################

ANSIBLE_METADATA = {
    "metadata_version": "1.1",
    "status": ["preview"],
    "supported_by": "community",
}

DOCUMENTATION = r"""
---
{{ $.Documentation.ToString }}"""

EXAMPLES = r"""
{{ $.Examples.ToString }}"""

RETURN = r"""
{{ $.Returns.ToString }}"""

################################################################################
# Imports
################################################################################

from ansible_collections.google.cloud.plugins.module_utils import gcp_utils as gcp
# BEGIN Custom imports
{{ $.CustomCode.CustomImport -}}
# END Custom imports

def get_self_link(module):
    params = module.params
{{- range $.UrlParamOnlyProperties }}
{{- if strEq .Type "ResourceRef" }}
    params["{{ .Name | underscore -}}"] = gcp.replace_resource_dict(module.params["{{ .Name | underscore -}}"], "{{ .Imports }}")
{{- end }}
{{- end }}

    return "{{ $.BaseUrl }}{{ $.Resource.Mmv1.SelfLinkUri | toPythonTpl }}".format(
        **params
    )


def get_create_link(module):
    params = module.params
{{- range $.UrlParamOnlyProperties }}
{{- if strEq .Type "ResourceRef" }}
    params["{{ .Name | underscore -}}"] = gcp.replace_resource_dict(module.params["{{ .Name | underscore -}}"], "{{ .Imports }}")
{{- end }}
{{- end }}

    return "{{ $.BaseUrl }}{{ $.Resource.Mmv1.CreateUri | toPythonTpl }}".format(
        **params
    )


def get_update_link(module):
    params = module.params
{{- range $.UrlParamOnlyProperties }}
{{- if strEq .Type "ResourceRef" }}
    params["{{ .Name | underscore -}}"] = gcp.replace_resource_dict(module.params["{{ .Name | underscore -}}"], "{{ .Imports }}")
{{- end }}
{{- end }}

    return "{{ $.BaseUrl }}{{ $.Resource.Mmv1.UpdateUri | toPythonTpl }}".format(
        **params
    )


def get_delete_link(module):
    params = module.params
{{- range $.UrlParamOnlyProperties }}
{{- if strEq .Type "ResourceRef" }}
    params["{{ .Name | underscore -}}"] = gcp.replace_resource_dict(module.params["{{ .Name | underscore -}}"], "{{ .Imports }}")
{{- end }}
{{- end }}

    return "{{ $.BaseUrl }}{{ $.Resource.Mmv1.DeleteUri | toPythonTpl }}".format(
        **params
    )


def get_collection_link(module):
    params = module.params
{{- range $.UrlParamOnlyProperties }}
{{- if strEq .Type "ResourceRef" }}
    params["{{ .Name | underscore -}}"] = gcp.replace_resource_dict(module.params["{{ .Name | underscore -}}"], "{{ .Imports }}")
{{- end }}
{{- end }}

    return "{{ $.BaseUrl }}{{ $.Resource.Mmv1.CollectionUrl | toPythonTpl }}".format(
        **params
    )

{{ range $option := $.AllNestedOptions -}}
class {{ $option.ClassName }}(gcp.Resource):
{{- if $option.InputSuboptions | len | gt 0 }}
    def _request(self):
        return {
    {{- range $suboption := $option.InputSuboptions }}
            "{{ $suboption.Name }}": {{""}}
        {{- if $suboption.IsNestedObject -}}
            {{ $suboption.ClassName }}(self.transport.get("{{ $suboption.AnsibleName }}", {})).to_request(),
        {{- else if $suboption.IsNestedList -}}
            [{{ $suboption.ClassName }}(item).to_request() for item in self.transport.get("{{ $suboption.AnsibleName }}", [])],
        {{- else -}}
            self.transport.get("{{ $suboption.AnsibleName }}"),
        {{- end }}
        {{- end }}
        }
    {{- end }}

{{- if $option.OutputSuboptions | len | gt 0 }}
    def _response(self, response: dict):
        return {
    {{- range $suboption := $option.OutputSuboptions }}
            "{{ $suboption.Name }}": {{""}}
        {{- if $suboption.IsNestedObject -}}
            {{ $suboption.ClassName }}(response.get("{{ $suboption.AnsibleName }}", {})).from_response(),
        {{- else if $suboption.IsNestedList -}}
            [{{ $suboption.ClassName }}(item).from_response() for item in response.get("{{ $suboption.AnsibleName }}", [])],
        {{- else -}}
            response.get("{{ $suboption.AnsibleName }}"),
        {{- end }}
        {{- end }}
        }
    {{- end }}


{{ end -}}
class {{ $.ModuleClass }}(gcp.Resource):
    def _request(self):
        return {
{{- range $option := $.InputOptions }}
            "{{ $option.Name }}": {{ if $option.IsNestedObject -}}
            {{ $option.ClassName }}(self.transport.get("{{ $option.AnsibleName }}", {})).to_request(),
            {{- else if $option.IsList -}}
            [
                {{- if $option.ElementsAre "NestedObject"  -}}
                {{ $option.ClassName }}(self.transport.get("{{ $option.AnsibleName }}", {})).to_request(),
                {{- else -}}
                self.transport.get("{{ $option.AnsibleName }}"),
                {{- end }}
            ],
            {{- else -}}
            self.transport.get("{{ $option.AnsibleName }}"),
            {{- end -}}
{{- end }}
        }

    def _response(self, response: dict):
        return {
{{- range $option := $.OutputOptions }}
            "{{ $option.Name }}": {{ if $option.IsNestedObject -}}
            {{ $option.ClassName }}(response.get("{{ $option.Name }}", {})).from_response(),
            {{- else if $option.IsList -}}
            [
                {{- if $option.ElementsAre "NestedObject"  -}}
                {{ $option.ClassName }}(response.get("{{ $option.Name }}", {})).from_response(),
                {{- else -}}
                response.get("{{ $option.Name }}"),
                {{- end }}
            ],
            {{- else -}}
            response.get("{{ $option.Name }}"),
            {{- end }}
{{- end }}
        }

################################################################################
# Main
################################################################################


def main():
    """Main function"""

    module = gcp.Module(
        {{ $.ArgumentSpec.ToString | indent 8 false }}
    )

    if not module.params["scopes"]:
        module.params["scopes"] = {{ $.Scopes | toJson }}

    state = module.params["state"]
    changed = False

    params = gcp.remove_nones_from_dict(module.params)
    resource = {{ $.ModuleClass }}(params, module=module, product="{{ $.ProductName }}", kind="{{ $.Kind }}")
    obj = resource.fetch(get_self_link(module), allow_not_found=True)

    async_ops = {{ $.GetAsyncOps | toJson }}
    async_link = async_ops.get("base_url")

    if obj is None:
        if state == "present":
            create_link = get_create_link(module)
            create_retries = async_ops["timeouts"]["create"]
            # BEGIN custom pre-create code
            {{ $.CustomCode.PreCreate | indent 12 false -}}
            # END custom pre-create code
            try:
                if "create" in async_ops["actions"]:
                    obj = resource.create_async(
                        create_link,
                        async_link=async_link,
                        retries=create_retries
                    )
                else:
                    obj = resource.create(create_link)
                changed = True
            except Exception as e:
                module.fail_json(msg=str(e))
        else:
            changed = False
    else:
        if state == "absent":
            delete_link = get_delete_link(module)
            delete_retries = async_ops["timeouts"]["delete"]
            # BEGIN custom pre-delete code
            {{ $.CustomCode.PreDelete | indent 12 false -}}
            # END custom pre-delete code
            try:
                if "delete" in async_ops["actions"]:
                    obj = resource.delete_async(
                        delete_link,
                        async_link=async_link,
                        retries=delete_retries
                    )
                else:
                    obj = resource.delete(delete_link)
                changed = True
            except Exception as e:
                module.fail_json(msg=str(e))
        else:
            pass

    obj = resource.fetch(get_self_link(module), allow_not_found=True)
    obj = resource.from_response(obj or {})

    obj.update({"changed": changed})
    module.exit_json(**obj)


if __name__ == "__main__":
    main()
