{{ template "python_file_header" . }}
from __future__ import absolute_import, division, print_function

__metaclass__ = type

################################################################################
# Documentation
################################################################################

ANSIBLE_METADATA = {
    "metadata_version": "1.1",
    "status": ["preview"],
    "supported_by": "community",
}

DOCUMENTATION = r"""
---
{{ $.Documentation.ToString }}"""

EXAMPLES = r"""
{{ $.Examples.ToString }}"""

RETURN = r"""
{{ $.Returns.ToString }}"""

################################################################################
# Imports
################################################################################

from ansible_collections.google.cloud.plugins.module_utils import gcp_utils as gcp
import json
{{ if $.CustomCode.CustomImport | trimSpace | len | gt 0 -}}
# BEGIN Custom imports
{{ $.CustomCode.CustomImport | trimSpace }}
# END Custom imports
{{- end }}

def self_link(module):
    params = module.params
{{- range $.UrlParamOnlyProperties }}
{{- if streq .Type "ResourceRef" }}
    params["{{ .Name | underscore -}}"] = gcp.replace_resource_dict(module.params["{{ .Name | underscore -}}"], "{{ .Imports }}")
{{- end }}
{{- end }}

    return "{{ $.BaseUrl }}{{ $.Resource.Mmv1.SelfLinkUri | toJinja }}".format(
        **params
    )


def create_link(module):
    params = module.params
{{- range $.UrlParamOnlyProperties }}
{{- if streq .Type "ResourceRef" }}
    params["{{ .Name | underscore -}}"] = gcp.replace_resource_dict(module.params["{{ .Name | underscore -}}"], "{{ .Imports }}")
{{- end }}
{{- end }}

    return "{{ $.BaseUrl }}{{ $.Resource.Mmv1.CreateUri | toJinja }}".format(
        **params
    )


def update_link(module):
    params = module.params
{{- range $.UrlParamOnlyProperties }}
{{- if streq .Type "ResourceRef" }}
    params["{{ .Name | underscore -}}"] = gcp.replace_resource_dict(module.params["{{ .Name | underscore -}}"], "{{ .Imports }}")
{{- end }}
{{- end }}

    return "{{ $.BaseUrl }}{{ $.Resource.Mmv1.UpdateUri | toJinja }}".format(
        **params
    )


def delete_link(module):
    params = module.params
{{- range $.UrlParamOnlyProperties }}
{{- if streq .Type "ResourceRef" }}
    params["{{ .Name | underscore -}}"] = gcp.replace_resource_dict(module.params["{{ .Name | underscore -}}"], "{{ .Imports }}")
{{- end }}
{{- end }}

    return "{{ $.BaseUrl }}{{ $.Resource.Mmv1.DeleteUri | toJinja }}".format(
        **params
    )


def collection_link(module):
    params = module.params
{{- range $.UrlParamOnlyProperties }}
{{- if streq .Type "ResourceRef" }}
    params["{{ .Name | underscore -}}"] = gcp.replace_resource_dict(module.params["{{ .Name | underscore -}}"], "{{ .Imports }}")
{{- end }}
{{- end }}

    return "{{ $.BaseUrl }}{{ $.Resource.Mmv1.CollectionUrl | toJinja }}".format(
        **params
    )


{{ range $key, $properties := $.FlattenedBodyProperties }}
{{- $responseProperties := selectProperties $properties "output" -}}
{{- $requestProperties := selectProperties $properties "!output" -}}
class {{ $.ParentClass }}{{ camelize $key "upper" }}(gcp.Resource):
{{- if $requestProperties | len | gt 0 }}
    def _request(self):
        return {
        {{- range $property := $requestProperties | sortProperties }}
            "{{ $property.Name }}": {{ if streq $property.Type "Array" -}}
            {{- if streq $property.ItemType.Type "NestedObject" -}}
                [{{ $.ParentClass }}{{ camelize $property.Name "upper" | singular }}(_).to_request() for _ in self.params.get("{{ $property.Name | underscore }}", [])],
            {{- else -}}
                [{{ $property.ItemType | classOrType }}(_) for _ in self.params.get("{{ $property.Name | underscore }}", [])],
            {{- end -}}
            {{- else if streq $property.Type "NestedObject" -}}
                {{ $.ParentClass }}{{ classOrType $property }}(self.params.get("{{ $property.Name | underscore }}", {})).to_request(),
            {{- else -}}
                self.params.get("{{ $property.Name | underscore }}"),
            {{- end -}}
        {{- end }}
        }
{{ end }}
{{- if $responseProperties | len | gt 0 }}
    def _response(self, response):
        return {
        {{- range $property := $responseProperties | sortProperties }}
            "{{ $property.Name }}": {{ if streq $property.Type "Array" -}}
            {{- if streq $property.ItemType.Type "NestedObject" -}}
                [{{ $.ParentClass }}{{ camelize $property.Name "upper" | singular }}(_).from_response() for _ in response.get("{{ $property.Name }}", [])],
            {{- else -}}
                [{{ $property.ItemType | classOrType }}(_) for _ in response.get("{{ $property.Name }}", [])],
            {{- end -}}
            {{- else if streq $property.Type "NestedObject" -}}
                {{ $.ParentClass }}{{ classOrType $property }}(response).from_response(),
            {{- else -}}
                response.get("{{ $property.Name }}"),
            {{- end -}}
        {{- end }}
        }
{{ end }}

{{ end -}}
################################################################################
# Main
################################################################################


def main():
    """Main function"""

    module = gcp.Module(
        {{ $.ArgumentSpec.ToString | indent 8 false }}
    )

    if not module.params["scopes"]:
        module.params["scopes"] = {{ $.Scopes | tojson }}

    state = module.params["state"]

    changed = False

    params = gcp.remove_nones_from_dict(module.params)

    resource = {{ $.ParentClass }}(params, module=module, product="{{ $.ParentName }}", kind="{{ $.Kind }}")

    obj = resource.fetch(self_link(module), allow_not_found=True)

    if obj is None:
        if state == "present":
            obj = resource.create(create_link(module))
            changed = True
        else:
            changed = False
    else:
        pass

    obj.update({"changed": changed})
    module.exit_json(**obj)


if __name__ == "__main__":
    main()
