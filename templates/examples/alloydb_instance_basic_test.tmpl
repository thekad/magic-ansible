- name: Test case
  block:
    - name: Create peering range
      ansible.builtin.command: >
        gcloud compute addresses create "{{`{{ resource_name }}`}}-peering" 
        --quiet
        --global
        --purpose=VPC_PEERING
        --prefix-length=16
        --network="{{`{{ _network.name }}`}}"
        --project="{{`{{ gcp_project }}`}}"

    - name: Connect peering range
      ansible.builtin.command: >
        gcloud services vpc-peerings connect
        --quiet
        --service=servicenetworking.googleapis.com
        --ranges="{{`{{ resource_name }}`}}-peering"
        --network="{{`{{ _network.name }}`}}"
        --project="{{`{{ gcp_project }}`}}"

    - name: Create primary alloydb cluster
      google.cloud.gcp_alloydb_cluster:
        cluster_id: "{{`{{ resource_name }}`}}-primary"
        state: present
        location: us-central1
        cluster_type: PRIMARY
        initial_user:
          user: pgroot
          password: Test123Test
        network_config:
          network: "projects/{{`{{ gcp_project_id }}`}}/global/networks/{{`{{ resource_name }}`}}"
        project: "{{`{{ gcp_project }}`}}"
        auth_kind: "{{`{{ gcp_cred_kind }}`}}"
        service_account_file: "{{`{{ gcp_cred_file }}`}}"
      register: _primary

    - name: Create an instance in primary cluster
      google.cloud.gcp_alloydb_instance:
        instance_id: "{{`{{ resource_name }}`}}"
        state: present
        instance_type: PRIMARY
        cluster: "{{`{{ _primary }}`}}"
        database_flags:
          password.enforce_complexity: "on"
          password.min_uppercase_letters: "1"
          password.min_numerical_chars: "1"
          password.min_pass_length: "10"
          password.enforce_expiration: "on"
          password.expiration_in_days: "1"
        project: "{{`{{ gcp_project }}`}}"
        auth_kind: "{{`{{ gcp_cred_kind }}`}}"
        service_account_file: "{{`{{ gcp_cred_file }}`}}"
      register: _instance

    - name: Run assertions
      ansible.builtin.assert:
        that:
          - _primary.changed == true
          - _instance.changed == true

  always:
    - name: Delete instance
      google.cloud.gcp_alloydb_instance:
        instance_id: "{{`{{ resource_name }}`}}"
        state: absent
        instance_type: PRIMARY
        cluster:
          name: "projects/{{`{{ gcp_project }}`}}/locations/us-central1/clusters/{{`{{ resource_name }}`}}-primary"
        project: "{{`{{ gcp_project }}`}}"
        auth_kind: "{{`{{ gcp_cred_kind }}`}}"
        service_account_file: "{{`{{ gcp_cred_file }}`}}"

    - name: Delete primary cluster
      google.cloud.gcp_alloydb_cluster:
        cluster_id: "{{`{{ resource_name }}`}}-primary"
        state: absent
        location: us-central1
        project: "{{`{{ gcp_project }}`}}"
        auth_kind: "{{`{{ gcp_cred_kind }}`}}"
        service_account_file: "{{`{{ gcp_cred_file }}`}}"

    - name: Delete peering range
      ansible.builtin.command: >
        gcloud compute addresses delete "{{`{{ resource_name }}`}}-peering"
        --global
        --quiet
        --project="{{`{{ gcp_project }}`}}"